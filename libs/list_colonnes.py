'''
Source 1 : https://www.daniweb.com/programming/software-development/threads/350266/creating-table-in-python
Source 2 : https://stackoverflow.com/questions/5286093/display-listbox-with-columns-using-tkinter
Modifié en fonction de mes besoins

Définit une classe d'objets qui permet la création de tableaux multi-colonnes avec Tkinter
'''

try:
    import Tkinter as tk
    import tkFont
    import ttk
except ImportError:  # Python 3
    import tkinter as tk
    import tkinter.font as tkFont
    import tkinter.ttk as ttk

class MultiColumnListbox(object):
    """use a ttk.TreeView as a multicolumn ListBox"""

    def __init__(self, master, header, info_lst):
        self.header=header
        self.tree = None
        self._setup_widgets(master, header)
        self._build_tree(header, info_lst)

    def _setup_widgets(self, master, pkt_header):
        s = """\click on header to sort by that column
to change width of column drag boundary
        """
##        msg = ttk.Label(wraplength="4i", justify="left", anchor="n",
##            padding=(10, 2, 10, 6), text=s)
##        msg.pack(fill='x')
        container = ttk.Frame(master)
        container.pack(fill='both', expand=True)
        # create a treeview with dual scrollbars
        self.tree = ttk.Treeview(columns=pkt_header, show="headings")
        vsb = ttk.Scrollbar(orient="vertical", command=self.tree.yview)
        hsb = ttk.Scrollbar(orient="horizontal", command=self.tree.xview)
        
        self.tree.configure(yscrollcommand=vsb.set, xscrollcommand=hsb.set)
        self.tree.grid(column=0, row=0, sticky='nsew', in_=container)
        vsb.grid(column=1, row=0, sticky='ns', in_=container)
        hsb.grid(column=0, row=1, sticky='ew', in_=container)
        container.grid_columnconfigure(0, weight=1)
        container.grid_rowconfigure(0, weight=1)

    def _build_tree(self, pkt_header, info_lst):
        for col in pkt_header:
            self.tree.heading(col, text=col.title(), command=lambda c=col: sortby(self.tree, c, 0))
            # adjust the column's width to the header string
            self.tree.column(col, width=tkFont.Font().measure(col.title()))

        for item in info_lst:
            self.tree.insert('', 'end', values=item)
            # adjust column's width if necessary to fit each value
            for ix, val in enumerate(item):
                col_w = tkFont.Font().measure(val)
                if self.tree.column(pkt_header[ix],width=None)<col_w:
                    self.tree.column(pkt_header[ix], width=col_w)
    def insert(self, item):
        """
        Insère une ligne
        """
        pkt_header = self.header
        
        self.tree.insert('', 'end', values=item)
        # adjust column's width if necessary to fit each value
        for ix, val in enumerate(item):
            col_w = tkFont.Font().measure(val)
            if self.tree.column(pkt_header[ix],width=None)<col_w:
                self.tree.column(pkt_header[ix], width=col_w)

    def delete(self):
        """
        Suprimme tous les éléments du Treeview
        """
        self.tree.delete(*self.tree.get_children())
        
def sortby(tree, col, descending):
    """sort tree contents when a column header is clicked on"""
    # grab values to sort
    data = [(tree.set(child, col), child) \
        for child in tree.get_children('')]
    # if the data to be sorted is numeric change to float
    #data =  change_numeric(data)
    # now sort the data in place
    data.sort(reverse=descending)
    for ix, item in enumerate(data):
        tree.move(item[1], '', ix)
    # switch the heading so it will sort in the opposite direction
    tree.heading(col, command=lambda col=col: sortby(tree, col, \
        int(not descending)))

if __name__ == '__main__':
    root = tk.Tk()
    root.title("Multicolumn Treeview/Listbox")
    listbox = MultiColumnListbox(header, info_lst)
    root.mainloop()
